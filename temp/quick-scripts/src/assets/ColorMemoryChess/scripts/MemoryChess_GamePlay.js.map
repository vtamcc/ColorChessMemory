{"version":3,"sources":["assets/ColorMemoryChess/scripts/MemoryChess_GamePlay.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport MemoryChess_Global from \"./MemoryChess_Global\";\nimport MemoryChess_Item from \"./MemoryChess_Item\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class MemoryChess_GamePlay extends cc.Component {\n    public static instance: MemoryChess_GamePlay = null;\n    @property(cc.Prefab)\n    prfItem: cc.Prefab = null;\n    @property(cc.Node)\n    nodeItem: cc.Node = null;\n\n    @property(cc.Node)\n    nodeDice: cc.Node = null;\n\n    @property(cc.Sprite)\n    spfDice: cc.Sprite = null;\n    @property(cc.SpriteFrame)\n    listSpfDice: cc.SpriteFrame [] = [];\n  \n    numCircles = 3;\n    listColor = [];\n    listIdColor = [];\n    isClick = false;\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        MemoryChess_GamePlay.instance = this;\n        this.randomColor(); \n        this.shuffle(); \n        this.renItem();\n\n    }\n\n\n    randomColor() {\n        for(let i = 0; i < MemoryChess_Global.arrColor.length; i++) {\n            this.listColor.push(i);\n            this.listColor.push(i);\n            this.listColor.push(i);\n        }\n\n        let ramdomIndex = Math.floor(Math.random() * MemoryChess_Global.arrColor.length);\n        this.listColor.push(ramdomIndex);\n        console.log(\"list Color \", this.listColor);\n    }\n\n    shuffle() {\n        for (let i = this.listColor.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [this.listColor[i], this.listColor[j]] = [this.listColor[j], this.listColor[i]];\n        }\n    }\n\n    renItem() {\n        let arrRadius = [200, 120, 0]; \n        let numPiecesInCircles = [16, 8, 1];\n\n        for (let circle = 0; circle < this.numCircles; circle++) {\n            let radius = arrRadius[circle];\n            let numPiecesInCircle = numPiecesInCircles[circle];\n            for (let i = 0; i < numPiecesInCircle; i++) {\n                let angle = (i / numPiecesInCircle) * Math.PI * 2; \n                let x = Math.cos(angle) * radius; \n                let y = Math.sin(angle) * radius; \n                let itemNode = cc.instantiate(this.prfItem); \n                let item = itemNode.getComponent(MemoryChess_Item); \n                itemNode.setPosition(x, y);\n                item.setData(this.listColor[i]); \n                this.nodeItem.addChild(itemNode); \n\n            }\n        }\n    }\n\n    clickRoll() {\n        if(this.isClick) {\n            return; \n        }else {\n            let idColor =  Math.floor(Math.random() * MemoryChess_Global.arrColor.length);\n            this.nodeDice.getComponent(cc.Animation).play('ani_dice');\n            this.listIdColor.push(idColor);\n           \n            this.scheduleOnce(() => {\n                this.nodeDice.active = false;\n                this.spfDice.node.active = true;\n                this.spfDice.spriteFrame = this.listSpfDice[idColor];\n            },1.5)\n            console.log(\"idColor \", this.listIdColor);\n            this.isClick = true;\n\n            console.log('isClick ', this.isClick);\n        }\n        \n    }\n\n    checkIdColor(idColor) {\n        if(this.listIdColor[0] == idColor) {\n            console.log(\"dung \");\n        }else {\n            console.log(\"Sai \");\n        }\n\n        this.listIdColor = [];\n    }\n\n    start() {\n\n    }\n\n    // update (dt) {}\n}\n"]}