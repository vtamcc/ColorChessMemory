{"version":3,"sources":["assets/ColorMemoryChess/scripts/MemoryChess_SettingView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nimport MemoryChess_Global from \"./MemoryChess_Global\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MemoryChess_SettingView extends cc.Component {\n\n    @property(cc.Slider)\n    sliderMusic: cc.Slider = null;\n    @property(cc.Node)\n    handleMusic: cc.Node = null;\n    @property(cc.Node)\n    nodeBarMusic: cc.Node = null;\n\n\n    @property(cc.Slider)\n    sliderSound: cc.Slider = null;\n    @property(cc.Node)\n    handleSound: cc.Node = null;\n    @property(cc.Node)\n    nodeBarSound: cc.Node = null;\n\n  \n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        // this.updateBarSound();\n        // this.updateBarMusic();\n\n        let savedMusicVolume = localStorage.getItem('musicBgVolume');\n        if(savedMusicVolume !== null ) {\n            MemoryChess_Global.volumMusic = JSON.parse(savedMusicVolume);\n            this.sliderMusic.progress = MemoryChess_Global.volumMusic;\n            this.nodeBarMusic.width = this.nodeBarMusic.parent.width * MemoryChess_Global.volumMusic;\n            MemoryChess_Global.soundManager.volumeMusicBg(MemoryChess_Global.volumMusic);\n            console.log(\"volume \", MemoryChess_Global.volumMusic)\n        }\n\n        let saveSoundVolume = localStorage.getItem('soundVolume');\n        if(saveSoundVolume !== null) {\n            MemoryChess_Global.volumSound = JSON.parse(saveSoundVolume)\n            this.sliderSound.progress = MemoryChess_Global.volumSound;\n            this.nodeBarSound.width = this.nodeBarSound.parent.width * MemoryChess_Global.volumSound;\n            MemoryChess_Global.soundManager.updateBarSound(MemoryChess_Global.volumSound);\n        }\n\n        this.sliderMusic.node.on('slide', this.updateBarMusic,this);\n        this.sliderSound.node.on('slide', this.updateBarSound,this);\n    }\n\n    start () {\n\n    }\n\n    updateBarMusic() {\n        let sliderValue = this.sliderMusic.progress;\n        let maxBarWidth = this.nodeBarMusic.parent.width;\n        this.nodeBarMusic.width = maxBarWidth * sliderValue;\n        MemoryChess_Global.soundManager.volumeMusicBg(sliderValue);\n        cc.sys.localStorage.setItem('musicBgVolume', sliderValue);\n    }\n\n    updateBarSound() {\n        let sliderValue = this.sliderSound.progress;\n        let maxBarWidth = this.nodeBarSound.parent.width;\n        this.nodeBarSound.width = maxBarWidth * sliderValue;\n        MemoryChess_Global.soundManager.updateBarSound(sliderValue);\n        cc.sys.localStorage.setItem('soundVolume', sliderValue);\n       \n    }\n\n    onClose() {\n        MemoryChess_Global.soundManager.onItemClicked();\n        this.node.destroy();\n    }\n    // update (dt) {}\n}\n"]}